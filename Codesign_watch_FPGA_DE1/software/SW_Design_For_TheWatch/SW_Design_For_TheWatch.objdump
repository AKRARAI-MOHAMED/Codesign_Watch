
SW_Design_For_TheWatch.elf:     file format elf32-littlenios2
SW_Design_For_TheWatch.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800148

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00000990 memsz 0x00000990 flags r-x
    LOAD off    0x000019b0 vaddr 0x008009b0 paddr 0x00800b34 align 2**12
         filesz 0x00000184 memsz 0x00000184 flags rw-
    LOAD off    0x00001cb8 vaddr 0x00800cb8 paddr 0x00800cb8 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000128  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000824  00800148  00800148  00001148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  0080096c  0080096c  0000196c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000184  008009b0  00800b34  000019b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00800cb8  00800cb8  00001cb8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000278  00000000  00000000  00001b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000004cc  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001f94  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000cb4  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002a06  00000000  00000000  00004eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000314  00000000  00000000  000078f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b25  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000507  00000000  00000000  0000872d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00008c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00008c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000a1cf  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000a1d2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000a1d3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000a1e9  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000a1f2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000016  00000000  00000000  0000a1fb  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  0000a211  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0004d044  00000000  00000000  0000a23a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800148 l    d  .text	00000000 .text
0080096c l    d  .rodata	00000000 .rodata
008009b0 l    d  .rwdata	00000000 .rwdata
00800cb8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800180 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00800184 l     F .text	00000050 uint2bcd
00000000 l    df *ABS*	00000000 lib2-divmod.c
00800500 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
008006ec l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
008007a8 l     F .text	0000000c alt_dev_reg
008009c0 l     O .rwdata	0000002c HEX
008009ec l     O .rwdata	0000002c KEY
00800a18 l     O .rwdata	0000002c LEDG
00800a44 l     O .rwdata	0000002c LEDR
00800a70 l     O .rwdata	0000002c SW
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
008008b0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00800778 g     F .text	0000002c alt_main
00800d08 g     O .bss	00000100 alt_irq
00800b34 g       *ABS*	00000000 __flash_rwdata_start
00800b04 g     O .rwdata	00000004 ledr_ptr
00800cc4 g     O .bss	00000004 mm
008003a8 g     F .text	00000040 Update_HEX_display
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000000c __reset
00800cf0 g     O .bss	00000004 edge_capture
00800020 g       *ABS*	00000000 __flash_exceptions_start
00800d04 g     O .bss	00000004 errno
00800cfc g     O .bss	00000004 alt_argv
00808af4 g       *ABS*	00000000 _gp
008007a4 g     F .text	00000004 usleep
00800cb8 g     O .bss	00000008 hex_segments
00800ac4 g     O .rwdata	00000030 alt_fd_list
0080063c g     F .text	00000008 __udivsi3
00800ce4 g     O .bss	00000004 cronometre
00800b10 g     O .rwdata	00000004 ss
0080040c g     F .text	00000024 init_timer
00800cd4 g     O .bss	00000004 crono
00800cec g     O .bss	00000004 reglage
00800b2c g     O .rwdata	00000004 alt_max_fd
00800b0c g     O .rwdata	00000004 key_ptr
00800cc8 g     O .bss	00000004 ms
0080064c g     F .text	000000a0 alt_irq_register
008009b0 g     O .rwdata	00000010 seven_seg_table
00800e08 g       *ABS*	00000000 __bss_end
00800cf4 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	0000005c alt_irq_handler
00800a9c g     O .rwdata	00000028 alt_dev_null
00800af8 g     O .rwdata	00000004 pushbutton_ptr
00800b00 g     O .rwdata	00000004 timer_ptr
008008ac g     F .text	00000004 alt_dcache_flush_all
00800b34 g       *ABS*	00000000 __ram_rwdata_end
00800b24 g     O .rwdata	00000008 alt_dev_list
00800b18 g     O .rwdata	00000004 JTAG_UART
00800ce0 g     O .bss	00000004 mmmm
008009b0 g       *ABS*	00000000 __ram_rodata_end
00800000 g       *ABS*	00000000 __alt_mem_SDRAM
00800644 g     F .text	00000008 __umodsi3
00800ccc g     O .bss	00000004 horloge
00800e08 g       *ABS*	00000000 end
01000000 g       *ABS*	00000000 __alt_stack_pointer
00800148 g     F .text	0000003c _start
008007b4 g     F .text	0000004c alt_sys_init
00800934 g     F .text	00000038 __mulsi3
008009b0 g       *ABS*	00000000 __ram_rwdata_start
0080096c g       *ABS*	00000000 __ram_rodata_start
00800298 g     F .text	00000110 handle_key_interrupts
00800820 g     F .text	0000008c alt_busy_sleep
00800e08 g       *ABS*	00000000 __alt_stack_base
008008b8 g     F .text	00000070 alt_dev_llist_insert
00800cb8 g       *ABS*	00000000 __bss_start
00800b08 g     O .rwdata	00000004 ledg_ptr
00800430 g     F .text	000000d0 main
00800d00 g     O .bss	00000004 alt_envp
008001d4 g     F .text	000000c4 handle_timer_interrupts
008003e8 g     F .text	00000024 init_key
00800b30 g     O .rwdata	00000004 alt_errno
0080057c g     F .text	00000060 __divsi3
0080096c g       *ABS*	00000000 __flash_rodata_start
00800800 g     F .text	00000020 alt_irq_init
00800cf8 g     O .bss	00000004 alt_argc
00800ce8 g     O .bss	00000004 sw
00800020 g       .exceptions	00000000 alt_irq_entry
00800cd0 g     O .bss	00000004 press
00800b1c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00800cc0 g     O .bss	00000004 hh
00800b34 g       *ABS*	00000000 _edata
00800cdc g     O .bss	00000004 ssss
00800e08 g       *ABS*	00000000 _end
00800148 g       *ABS*	00000000 __ram_exceptions_end
0080092c g     F .text	00000008 altera_nios2_qsys_irq_init
0080000c g       .entry	00000000 exit
008005dc g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080000c g       .entry	00000000 _exit
00800cd8 g     O .bss	00000004 msms
00800afc g     O .rwdata	00000004 sw_ptr
00800928 g     F .text	00000004 alt_icache_flush_all
00800af4 g     O .rwdata	00000004 green_LED_ptr
00800b14 g     O .rwdata	00000004 alt_priority_mask
0080070c g     F .text	0000006c alt_load



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08405214 	ori	at,at,328
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	deffff04 	addi	sp,sp,-4
  8000f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f4:	0009313a 	rdctl	r4,ipending
  8000f8:	00c00044 	movi	r3,1
  8000fc:	000b883a 	mov	r5,zero
  800100:	01802034 	movhi	r6,128
  800104:	31834204 	addi	r6,r6,3336
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800108:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  80010c:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800110:	10000726 	beq	r2,zero,800130 <alt_irq_handler+0x44>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800114:	31000117 	ldw	r4,4(r6)
  800118:	30800017 	ldw	r2,0(r6)
  80011c:	103ee83a 	callr	r2
  800120:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800124:	10000526 	beq	r2,zero,80013c <alt_irq_handler+0x50>
  800128:	1009883a 	mov	r4,r2
  80012c:	003ff206 	br	8000f8 <alt_irq_handler+0xc>
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800130:	29400044 	addi	r5,r5,1
  800134:	31800204 	addi	r6,r6,8
  800138:	003ff306 	br	800108 <alt_irq_handler+0x1c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  80013c:	dfc00017 	ldw	ra,0(sp)
  800140:	dec00104 	addi	sp,sp,4
  800144:	f800283a 	ret

Disassembly of section .text:

00800148 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800148:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80014c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800150:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800154:	d6a2bd14 	ori	gp,gp,35572
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800158:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  80015c:	10832e14 	ori	r2,r2,3256

    movhi r3, %hi(__bss_end)
  800160:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800164:	18c38214 	ori	r3,r3,3592

    beq r2, r3, 1f
  800168:	10c00326 	beq	r2,r3,800178 <_start+0x30>

0:
    stw zero, (r2)
  80016c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800170:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800174:	10fffd36 	bltu	r2,r3,80016c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800178:	080070c0 	call	80070c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80017c:	08007780 	call	800778 <alt_main>

00800180 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800180:	003fff06 	br	800180 <alt_after_alt_main>

00800184 <uint2bcd>:
	int cronometre = 0;
	int sw = 0;
	int reglage = 0;


	static unsigned int uint2bcd(unsigned int ival){
  800184:	defffc04 	addi	sp,sp,-16
  800188:	dc000015 	stw	r16,0(sp)
  80018c:	04000284 	movi	r16,10
  800190:	800b883a 	mov	r5,r16
  800194:	dfc00315 	stw	ra,12(sp)
  800198:	dc800215 	stw	r18,8(sp)
  80019c:	dc400115 	stw	r17,4(sp)
  8001a0:	2023883a 	mov	r17,r4
  8001a4:	080063c0 	call	80063c <__udivsi3>
  8001a8:	1024913a 	slli	r18,r2,4
  8001ac:	8809883a 	mov	r4,r17
  8001b0:	800b883a 	mov	r5,r16
  8001b4:	08006440 	call	800644 <__umodsi3>
		return ((ival /10)<<4)|(ival%10);
	}
  8001b8:	9084b03a 	or	r2,r18,r2
  8001bc:	dfc00317 	ldw	ra,12(sp)
  8001c0:	dc800217 	ldw	r18,8(sp)
  8001c4:	dc400117 	ldw	r17,4(sp)
  8001c8:	dc000017 	ldw	r16,0(sp)
  8001cc:	dec00404 	addi	sp,sp,16
  8001d0:	f800283a 	ret

008001d4 <handle_timer_interrupts>:

	void handle_timer_interrupts(void* context, alt_u32 id)
	{
	    /* Reset the Button's edge capture register. */
		*(timer_ptr) = 0; 		// Clear the interrupt
  8001d4:	d0a00317 	ldw	r2,-32756(gp)
		  ms++;
		  if (ms==1000){
  8001d8:	0140fa04 	movi	r5,1000
	}

	void handle_timer_interrupts(void* context, alt_u32 id)
	{
	    /* Reset the Button's edge capture register. */
		*(timer_ptr) = 0; 		// Clear the interrupt
  8001dc:	10000015 	stw	zero,0(r2)
		  ms++;
  8001e0:	d0a07517 	ldw	r2,-32300(gp)
  8001e4:	10800044 	addi	r2,r2,1
  8001e8:	d0a07515 	stw	r2,-32300(gp)
		  if (ms==1000){
  8001ec:	1140041e 	bne	r2,r5,800200 <handle_timer_interrupts+0x2c>
			  ss++;ms=0;
  8001f0:	d0a00717 	ldw	r2,-32740(gp)
  8001f4:	d0207515 	stw	zero,-32300(gp)
  8001f8:	10800044 	addi	r2,r2,1
  8001fc:	d0a00715 	stw	r2,-32740(gp)
		  }

          if (ss==60){
  800200:	d0a00717 	ldw	r2,-32740(gp)
  800204:	01000f04 	movi	r4,60
  800208:	1100041e 	bne	r2,r4,80021c <handle_timer_interrupts+0x48>
	  		  mm++;
  80020c:	d0a07417 	ldw	r2,-32304(gp)
	  		  ss=0;
  800210:	d0200715 	stw	zero,-32740(gp)
		  if (ms==1000){
			  ss++;ms=0;
		  }

          if (ss==60){
	  		  mm++;
  800214:	10800044 	addi	r2,r2,1
  800218:	d0a07415 	stw	r2,-32304(gp)
	  		  ss=0;
	  	  }

	  	  if (mm==60){
  80021c:	d0a07417 	ldw	r2,-32304(gp)
  800220:	1100041e 	bne	r2,r4,800234 <handle_timer_interrupts+0x60>
	  		  hh++;
  800224:	d0a07317 	ldw	r2,-32308(gp)
	  		  mm=0;
  800228:	d0207415 	stw	zero,-32304(gp)
	  		  mm++;
	  		  ss=0;
	  	  }

	  	  if (mm==60){
	  		  hh++;
  80022c:	10800044 	addi	r2,r2,1
  800230:	d0a07315 	stw	r2,-32308(gp)
	  		  mm=0;
	  	  }

	  	  if (hh==24){
  800234:	d0e07317 	ldw	r3,-32308(gp)
  800238:	00800604 	movi	r2,24
  80023c:	1880011e 	bne	r3,r2,800244 <handle_timer_interrupts+0x70>
	  		  hh=0;
  800240:	d0207315 	stw	zero,-32308(gp)
	  	  }

  		  if (crono==1){
  800244:	d0e07817 	ldw	r3,-32288(gp)
  800248:	00800044 	movi	r2,1
  80024c:	1880111e 	bne	r3,r2,800294 <handle_timer_interrupts+0xc0>
  			  msms++;
  800250:	d0a07917 	ldw	r2,-32284(gp)
  800254:	10c5883a 	add	r2,r2,r3
  800258:	d0a07915 	stw	r2,-32284(gp)
  			  if (msms==1000){
  80025c:	1140041e 	bne	r2,r5,800270 <handle_timer_interrupts+0x9c>
  				  ssss++;
  800260:	d0a07a17 	ldw	r2,-32280(gp)
  				  msms=0;
  800264:	d0207915 	stw	zero,-32284(gp)
	  	  }

  		  if (crono==1){
  			  msms++;
  			  if (msms==1000){
  				  ssss++;
  800268:	10c5883a 	add	r2,r2,r3
  80026c:	d0a07a15 	stw	r2,-32280(gp)
  				  msms=0;
  			  }

  			  if (ssss==60){
  800270:	d0a07a17 	ldw	r2,-32280(gp)
  800274:	1100041e 	bne	r2,r4,800288 <handle_timer_interrupts+0xb4>
  				  mmmm++;
  800278:	d0a07b17 	ldw	r2,-32276(gp)
  				  ssss=0;
  80027c:	d0207a15 	stw	zero,-32280(gp)
  				  ssss++;
  				  msms=0;
  			  }

  			  if (ssss==60){
  				  mmmm++;
  800280:	10c5883a 	add	r2,r2,r3
  800284:	d0a07b15 	stw	r2,-32276(gp)
  				  ssss=0;
  			  }

  			  if (mmmm==60){
  800288:	d0a07b17 	ldw	r2,-32276(gp)
  80028c:	1100011e 	bne	r2,r4,800294 <handle_timer_interrupts+0xc0>
  				  mmmm=0;
  800290:	d0207b15 	stw	zero,-32276(gp)
  800294:	f800283a 	ret

00800298 <handle_key_interrupts>:
  		  }
	}

	void handle_key_interrupts(void* context, alt_u32 id)
	{
		press = * (key_ptr +3) ;
  800298:	d0e00617 	ldw	r3,-32744(gp)

		if (sw&0x1){
  80029c:	d0a07d17 	ldw	r2,-32268(gp)
  8002a0:	01400044 	movi	r5,1
  		  }
	}

	void handle_key_interrupts(void* context, alt_u32 id)
	{
		press = * (key_ptr +3) ;
  8002a4:	19000317 	ldw	r4,12(r3)

		if (sw&0x1){
  8002a8:	1144703a 	and	r2,r2,r5
  8002ac:	1005003a 	cmpeq	r2,r2,zero
  		  }
	}

	void handle_key_interrupts(void* context, alt_u32 id)
	{
		press = * (key_ptr +3) ;
  8002b0:	d1207715 	stw	r4,-32292(gp)
  8002b4:	19800304 	addi	r6,r3,12

		if (sw&0x1){
  8002b8:	10001b1e 	bne	r2,zero,800328 <handle_key_interrupts+0x90>
			reglage = 0;

		    if ((press&0x2) && (crono ==0)) {
  8002bc:	2080008c 	andi	r2,r4,2
	void handle_key_interrupts(void* context, alt_u32 id)
	{
		press = * (key_ptr +3) ;

		if (sw&0x1){
			reglage = 0;
  8002c0:	d0207e15 	stw	zero,-32264(gp)

		    if ((press&0x2) && (crono ==0)) {
  8002c4:	10000226 	beq	r2,zero,8002d0 <handle_key_interrupts+0x38>
  8002c8:	d0a07817 	ldw	r2,-32288(gp)
  8002cc:	10000a26 	beq	r2,zero,8002f8 <handle_key_interrupts+0x60>

		          crono=1;

		    }

		    else if ((press&0x4) && (crono == 1)){
  8002d0:	2080010c 	andi	r2,r4,4
  8002d4:	10000a26 	beq	r2,zero,800300 <handle_key_interrupts+0x68>
  8002d8:	d0e07817 	ldw	r3,-32288(gp)
  8002dc:	01400044 	movi	r5,1
  8002e0:	1940031e 	bne	r3,r5,8002f0 <handle_key_interrupts+0x58>

			      crono=2;
  8002e4:	00800084 	movi	r2,2
  8002e8:	d0a07815 	stw	r2,-32288(gp)
  8002ec:	00002c06 	br	8003a0 <handle_key_interrupts+0x108>
		    }

		    else if ((press&0x4) && (crono == 2)){
  8002f0:	00800084 	movi	r2,2
  8002f4:	1880021e 	bne	r3,r2,800300 <handle_key_interrupts+0x68>
			      crono=1;
  8002f8:	d1607815 	stw	r5,-32288(gp)
  8002fc:	00002806 	br	8003a0 <handle_key_interrupts+0x108>
		    }

		    else if ((press&0x8) && (crono==2)){
  800300:	2080020c 	andi	r2,r4,8
  800304:	10002626 	beq	r2,zero,8003a0 <handle_key_interrupts+0x108>
  800308:	d0e07817 	ldw	r3,-32288(gp)
  80030c:	00800084 	movi	r2,2
  800310:	1880231e 	bne	r3,r2,8003a0 <handle_key_interrupts+0x108>

			     crono=0;
  800314:	d0207815 	stw	zero,-32288(gp)
			     msms=0;
  800318:	d0207915 	stw	zero,-32284(gp)
			     ssss=0;
  80031c:	d0207a15 	stw	zero,-32280(gp)
			     mmmm=0;
  800320:	d0207b15 	stw	zero,-32276(gp)
  800324:	00001e06 	br	8003a0 <handle_key_interrupts+0x108>
		    }
		}
		else{

			if (press&0x1)
  800328:	2080004c 	andi	r2,r4,1
  80032c:	1005003a 	cmpeq	r2,r2,zero
  800330:	1000011e 	bne	r2,zero,800338 <handle_key_interrupts+0xa0>
				reglage = 0;
  800334:	d0207e15 	stw	zero,-32264(gp)
			if ((press&0x2)&&(reglage==0))
  800338:	2080008c 	andi	r2,r4,2
  80033c:	10000726 	beq	r2,zero,80035c <handle_key_interrupts+0xc4>
  800340:	d0a07e17 	ldw	r2,-32264(gp)
  800344:	1000021e 	bne	r2,zero,800350 <handle_key_interrupts+0xb8>
				reglage = 1;
  800348:	d1607e15 	stw	r5,-32264(gp)
  80034c:	00001406 	br	8003a0 <handle_key_interrupts+0x108>
			else if ((press&0x2)&&(reglage==1))
  800350:	1140021e 	bne	r2,r5,80035c <handle_key_interrupts+0xc4>
				reglage = 0;
  800354:	d0207e15 	stw	zero,-32264(gp)
  800358:	00001106 	br	8003a0 <handle_key_interrupts+0x108>

			else if ((press&0x4) && (reglage==1)){
  80035c:	2080010c 	andi	r2,r4,4
  800360:	10000726 	beq	r2,zero,800380 <handle_key_interrupts+0xe8>
  800364:	d0e07e17 	ldw	r3,-32264(gp)
  800368:	00800044 	movi	r2,1
  80036c:	1880041e 	bne	r3,r2,800380 <handle_key_interrupts+0xe8>
			      mm++;
  800370:	d0a07417 	ldw	r2,-32304(gp)
  800374:	10c5883a 	add	r2,r2,r3
  800378:	d0a07415 	stw	r2,-32304(gp)
  80037c:	00000806 	br	8003a0 <handle_key_interrupts+0x108>
			}

			else if ((press&0x8) && (reglage==1)){
  800380:	2080020c 	andi	r2,r4,8
  800384:	10000626 	beq	r2,zero,8003a0 <handle_key_interrupts+0x108>
  800388:	d0e07e17 	ldw	r3,-32264(gp)
  80038c:	00800044 	movi	r2,1
  800390:	1880031e 	bne	r3,r2,8003a0 <handle_key_interrupts+0x108>
				  hh++;
  800394:	d0a07317 	ldw	r2,-32308(gp)
  800398:	10c5883a 	add	r2,r2,r3
  80039c:	d0a07315 	stw	r2,-32308(gp)
			}
		}

		*(key_ptr + 3) =0;
  8003a0:	30000015 	stw	zero,0(r6)
	}
  8003a4:	f800283a 	ret

008003a8 <Update_HEX_display>:
		* (key_ptr + 2) = 0xe;
	    alt_irq_register( KEY_IRQ, edge_capture_ptr,handle_key_interrupts );
	}

	void Update_HEX_display(int buffer)
	{
  8003a8:	d0e07104 	addi	r3,gp,-32316
  8003ac:	01802034 	movhi	r6,128
  8003b0:	31826c04 	addi	r6,r6,2480
  8003b4:	19400204 	addi	r5,r3,8
		//shift_buffer = uint2bcd(shift_buffer);
		for ( i = 0; i < 8; ++i )
		{
			nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
			code = seven_seg_table[nibble];
			hex_segments[i] = code;
  8003b8:	208003cc 	andi	r2,r4,15
  8003bc:	1185883a 	add	r2,r2,r6
  8003c0:	10800003 	ldbu	r2,0(r2)
			shift_buffer = shift_buffer >> 4;
  8003c4:	2009d13a 	srai	r4,r4,4
		//shift_buffer = uint2bcd(shift_buffer);
		for ( i = 0; i < 8; ++i )
		{
			nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
			code = seven_seg_table[nibble];
			hex_segments[i] = code;
  8003c8:	18800005 	stb	r2,0(r3)
			shift_buffer = shift_buffer >> 4;
  8003cc:	18c00044 	addi	r3,r3,1
		int i;

		shift_buffer = buffer;

		//shift_buffer = uint2bcd(shift_buffer);
		for ( i = 0; i < 8; ++i )
  8003d0:	197ff91e 	bne	r3,r5,8003b8 <Update_HEX_display+0x10>
			code = seven_seg_table[nibble];
			hex_segments[i] = code;
			shift_buffer = shift_buffer >> 4;
		}

		*(HEX3_HEX0_ptr) = *(int *) hex_segments; // drive the hex displays
  8003d4:	d0e07117 	ldw	r3,-32316(gp)
  8003d8:	00804034 	movhi	r2,256
  8003dc:	10840804 	addi	r2,r2,4128
  8003e0:	10c00015 	stw	r3,0(r2)

		return;
	}
  8003e4:	f800283a 	ret

008003e8 <init_key>:
	    alt_irq_register( TIMER_MS_IRQ, edge_capture_ptr,handle_timer_interrupts );
	}
	void init_key()
	{
		void* edge_capture_ptr = (void*) &edge_capture;
		* (key_ptr + 2) = 0xe;
  8003e8:	d0a00617 	ldw	r2,-32744(gp)
  8003ec:	00c00384 	movi	r3,14
	    alt_irq_register( KEY_IRQ, edge_capture_ptr,handle_key_interrupts );
  8003f0:	01000084 	movi	r4,2
	    alt_irq_register( TIMER_MS_IRQ, edge_capture_ptr,handle_timer_interrupts );
	}
	void init_key()
	{
		void* edge_capture_ptr = (void*) &edge_capture;
		* (key_ptr + 2) = 0xe;
  8003f4:	10800204 	addi	r2,r2,8
	    alt_irq_register( KEY_IRQ, edge_capture_ptr,handle_key_interrupts );
  8003f8:	d1607f04 	addi	r5,gp,-32260
  8003fc:	01802034 	movhi	r6,128
  800400:	3180a604 	addi	r6,r6,664
	    alt_irq_register( TIMER_MS_IRQ, edge_capture_ptr,handle_timer_interrupts );
	}
	void init_key()
	{
		void* edge_capture_ptr = (void*) &edge_capture;
		* (key_ptr + 2) = 0xe;
  800404:	10c00015 	stw	r3,0(r2)
	    alt_irq_register( KEY_IRQ, edge_capture_ptr,handle_key_interrupts );
  800408:	080064c1 	jmpi	80064c <alt_irq_register>

0080040c <init_timer>:
	{
	    /* Recast the edge_capture pointer to match the alt_irq_register() function
	     * prototype. */
	    void* edge_capture_ptr = (void*) &edge_capture;
	    /* set the interval timer period for scrolling the HEX displays */
		*(timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
  80040c:	d0a00317 	ldw	r2,-32756(gp)
  800410:	00c001c4 	movi	r3,7
	    alt_irq_register( TIMER_MS_IRQ, edge_capture_ptr,handle_timer_interrupts );
  800414:	01000044 	movi	r4,1
	{
	    /* Recast the edge_capture pointer to match the alt_irq_register() function
	     * prototype. */
	    void* edge_capture_ptr = (void*) &edge_capture;
	    /* set the interval timer period for scrolling the HEX displays */
		*(timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
  800418:	10800104 	addi	r2,r2,4
	    alt_irq_register( TIMER_MS_IRQ, edge_capture_ptr,handle_timer_interrupts );
  80041c:	d1607f04 	addi	r5,gp,-32260
  800420:	01802034 	movhi	r6,128
  800424:	31807504 	addi	r6,r6,468
	{
	    /* Recast the edge_capture pointer to match the alt_irq_register() function
	     * prototype. */
	    void* edge_capture_ptr = (void*) &edge_capture;
	    /* set the interval timer period for scrolling the HEX displays */
		*(timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
  800428:	10c00015 	stw	r3,0(r2)
	    alt_irq_register( TIMER_MS_IRQ, edge_capture_ptr,handle_timer_interrupts );
  80042c:	080064c1 	jmpi	80064c <alt_irq_register>

00800430 <main>:

		return;
	}

int main()
{
  800430:	defffd04 	addi	sp,sp,-12
  800434:	dfc00215 	stw	ra,8(sp)
  800438:	dc400115 	stw	r17,4(sp)
  80043c:	dc000015 	stw	r16,0(sp)

    init_timer();
  800440:	080040c0 	call	80040c <init_timer>
    init_key();
  800444:	08003e80 	call	8003e8 <init_key>
    while (1) {
  	    press = *(pushbutton_ptr);
  800448:	d0a00117 	ldw	r2,-32764(gp)
  	    sw    = *(sw_ptr);
  	    * ledr_ptr = ss;
  80044c:	d0e00717 	ldw	r3,-32740(gp)
{

    init_timer();
    init_key();
    while (1) {
  	    press = *(pushbutton_ptr);
  800450:	10800017 	ldw	r2,0(r2)
  800454:	d0a07715 	stw	r2,-32292(gp)
  	    sw    = *(sw_ptr);
  800458:	d0a00217 	ldw	r2,-32760(gp)
  80045c:	10800017 	ldw	r2,0(r2)
  800460:	d0a07d15 	stw	r2,-32268(gp)
  	    * ledr_ptr = ss;
  800464:	d0a00417 	ldw	r2,-32752(gp)
  800468:	10c00015 	stw	r3,0(r2)
  	    * ledg_ptr = ((reglage<<7)&0x00000080)|crono;
  80046c:	d0a07e17 	ldw	r2,-32264(gp)
  800470:	d0e07817 	ldw	r3,-32288(gp)
  800474:	100491fa 	slli	r2,r2,7
  800478:	1080200c 	andi	r2,r2,128
  80047c:	10c4b03a 	or	r2,r2,r3
  800480:	d0e00517 	ldw	r3,-32748(gp)
  800484:	18800015 	stw	r2,0(r3)

  	    int hh_a = uint2bcd(hh);
  800488:	d1207317 	ldw	r4,-32308(gp)
  80048c:	08001840 	call	800184 <uint2bcd>
  	    int mm_a = uint2bcd(mm);
  800490:	d1207417 	ldw	r4,-32304(gp)
  	    press = *(pushbutton_ptr);
  	    sw    = *(sw_ptr);
  	    * ledr_ptr = ss;
  	    * ledg_ptr = ((reglage<<7)&0x00000080)|crono;

  	    int hh_a = uint2bcd(hh);
  800494:	1022923a 	slli	r17,r2,8
  	    int mm_a = uint2bcd(mm);
  800498:	08001840 	call	800184 <uint2bcd>

  	    horloge = ((hh_a<<8)&0x0000FF00)|(mm_a&0x000000FF);

  	    hh_a = uint2bcd(ssss);
  80049c:	d1207a17 	ldw	r4,-32280(gp)
  	    sw    = *(sw_ptr);
  	    * ledr_ptr = ss;
  	    * ledg_ptr = ((reglage<<7)&0x00000080)|crono;

  	    int hh_a = uint2bcd(hh);
  	    int mm_a = uint2bcd(mm);
  8004a0:	10803fcc 	andi	r2,r2,255
  	    press = *(pushbutton_ptr);
  	    sw    = *(sw_ptr);
  	    * ledr_ptr = ss;
  	    * ledg_ptr = ((reglage<<7)&0x00000080)|crono;

  	    int hh_a = uint2bcd(hh);
  8004a4:	8c7fc00c 	andi	r17,r17,65280
  	    int mm_a = uint2bcd(mm);
  8004a8:	88a2b03a 	or	r17,r17,r2

  	    horloge = ((hh_a<<8)&0x0000FF00)|(mm_a&0x000000FF);
  8004ac:	d4607615 	stw	r17,-32296(gp)

  	    hh_a = uint2bcd(ssss);
  8004b0:	08001840 	call	800184 <uint2bcd>
  	    mm_a = uint2bcd(msms/10);
  8004b4:	d1207917 	ldw	r4,-32284(gp)
  8004b8:	01400284 	movi	r5,10
  	    int hh_a = uint2bcd(hh);
  	    int mm_a = uint2bcd(mm);

  	    horloge = ((hh_a<<8)&0x0000FF00)|(mm_a&0x000000FF);

  	    hh_a = uint2bcd(ssss);
  8004bc:	1020923a 	slli	r16,r2,8
  	    mm_a = uint2bcd(msms/10);
  8004c0:	080057c0 	call	80057c <__divsi3>
  8004c4:	1009883a 	mov	r4,r2
  8004c8:	08001840 	call	800184 <uint2bcd>
  8004cc:	10803fcc 	andi	r2,r2,255
  	    int hh_a = uint2bcd(hh);
  	    int mm_a = uint2bcd(mm);

  	    horloge = ((hh_a<<8)&0x0000FF00)|(mm_a&0x000000FF);

  	    hh_a = uint2bcd(ssss);
  8004d0:	843fc00c 	andi	r16,r16,65280
  	    mm_a = uint2bcd(msms/10);
  8004d4:	8086b03a 	or	r3,r16,r2

  	    cronometre = ((hh_a<<8)&0x0000FF00)|(mm_a&0x000000FF);

  	      if ((sw&0x1)==0){
  8004d8:	d0a07d17 	ldw	r2,-32268(gp)

  		      Update_HEX_display(horloge);
  8004dc:	8809883a 	mov	r4,r17
  	    horloge = ((hh_a<<8)&0x0000FF00)|(mm_a&0x000000FF);

  	    hh_a = uint2bcd(ssss);
  	    mm_a = uint2bcd(msms/10);

  	    cronometre = ((hh_a<<8)&0x0000FF00)|(mm_a&0x000000FF);
  8004e0:	d0e07c15 	stw	r3,-32272(gp)

  	      if ((sw&0x1)==0){
  8004e4:	1080004c 	andi	r2,r2,1
  8004e8:	10000126 	beq	r2,zero,8004f0 <main+0xc0>
  		      Update_HEX_display(horloge);
  	      }

  	      else{

  		      Update_HEX_display(cronometre);
  8004ec:	1809883a 	mov	r4,r3
  8004f0:	08003a80 	call	8003a8 <Update_HEX_display>
  	      }

  	  usleep(900);
  8004f4:	0100e104 	movi	r4,900
  8004f8:	08007a40 	call	8007a4 <usleep>
  8004fc:	003fd206 	br	800448 <main+0x18>

00800500 <udivmodsi4>:
  800500:	29001b2e 	bgeu	r5,r4,800570 <udivmodsi4+0x70>
  800504:	28001a16 	blt	r5,zero,800570 <udivmodsi4+0x70>
  800508:	00800044 	movi	r2,1
  80050c:	0007883a 	mov	r3,zero
  800510:	01c007c4 	movi	r7,31
  800514:	00000306 	br	800524 <udivmodsi4+0x24>
  800518:	19c01326 	beq	r3,r7,800568 <udivmodsi4+0x68>
  80051c:	18c00044 	addi	r3,r3,1
  800520:	28000416 	blt	r5,zero,800534 <udivmodsi4+0x34>
  800524:	294b883a 	add	r5,r5,r5
  800528:	1085883a 	add	r2,r2,r2
  80052c:	293ffa36 	bltu	r5,r4,800518 <udivmodsi4+0x18>
  800530:	10000d26 	beq	r2,zero,800568 <udivmodsi4+0x68>
  800534:	0007883a 	mov	r3,zero
  800538:	21400236 	bltu	r4,r5,800544 <udivmodsi4+0x44>
  80053c:	2149c83a 	sub	r4,r4,r5
  800540:	1886b03a 	or	r3,r3,r2
  800544:	1004d07a 	srli	r2,r2,1
  800548:	280ad07a 	srli	r5,r5,1
  80054c:	103ffa1e 	bne	r2,zero,800538 <udivmodsi4+0x38>
  800550:	30000226 	beq	r6,zero,80055c <udivmodsi4+0x5c>
  800554:	2005883a 	mov	r2,r4
  800558:	f800283a 	ret
  80055c:	1809883a 	mov	r4,r3
  800560:	2005883a 	mov	r2,r4
  800564:	f800283a 	ret
  800568:	0007883a 	mov	r3,zero
  80056c:	003ff806 	br	800550 <udivmodsi4+0x50>
  800570:	00800044 	movi	r2,1
  800574:	0007883a 	mov	r3,zero
  800578:	003fef06 	br	800538 <udivmodsi4+0x38>

0080057c <__divsi3>:
  80057c:	defffe04 	addi	sp,sp,-8
  800580:	dc000015 	stw	r16,0(sp)
  800584:	dfc00115 	stw	ra,4(sp)
  800588:	0021883a 	mov	r16,zero
  80058c:	20000c16 	blt	r4,zero,8005c0 <__divsi3+0x44>
  800590:	000d883a 	mov	r6,zero
  800594:	28000e16 	blt	r5,zero,8005d0 <__divsi3+0x54>
  800598:	08005000 	call	800500 <udivmodsi4>
  80059c:	1007883a 	mov	r3,r2
  8005a0:	8005003a 	cmpeq	r2,r16,zero
  8005a4:	1000011e 	bne	r2,zero,8005ac <__divsi3+0x30>
  8005a8:	00c7c83a 	sub	r3,zero,r3
  8005ac:	1805883a 	mov	r2,r3
  8005b0:	dfc00117 	ldw	ra,4(sp)
  8005b4:	dc000017 	ldw	r16,0(sp)
  8005b8:	dec00204 	addi	sp,sp,8
  8005bc:	f800283a 	ret
  8005c0:	0109c83a 	sub	r4,zero,r4
  8005c4:	04000044 	movi	r16,1
  8005c8:	000d883a 	mov	r6,zero
  8005cc:	283ff20e 	bge	r5,zero,800598 <__divsi3+0x1c>
  8005d0:	014bc83a 	sub	r5,zero,r5
  8005d4:	8021003a 	cmpeq	r16,r16,zero
  8005d8:	003fef06 	br	800598 <__divsi3+0x1c>

008005dc <__modsi3>:
  8005dc:	deffff04 	addi	sp,sp,-4
  8005e0:	dfc00015 	stw	ra,0(sp)
  8005e4:	01800044 	movi	r6,1
  8005e8:	2807883a 	mov	r3,r5
  8005ec:	20000416 	blt	r4,zero,800600 <__modsi3+0x24>
  8005f0:	28000c16 	blt	r5,zero,800624 <__modsi3+0x48>
  8005f4:	dfc00017 	ldw	ra,0(sp)
  8005f8:	dec00104 	addi	sp,sp,4
  8005fc:	08005001 	jmpi	800500 <udivmodsi4>
  800600:	0109c83a 	sub	r4,zero,r4
  800604:	28000b16 	blt	r5,zero,800634 <__modsi3+0x58>
  800608:	180b883a 	mov	r5,r3
  80060c:	01800044 	movi	r6,1
  800610:	08005000 	call	800500 <udivmodsi4>
  800614:	0085c83a 	sub	r2,zero,r2
  800618:	dfc00017 	ldw	ra,0(sp)
  80061c:	dec00104 	addi	sp,sp,4
  800620:	f800283a 	ret
  800624:	014bc83a 	sub	r5,zero,r5
  800628:	dfc00017 	ldw	ra,0(sp)
  80062c:	dec00104 	addi	sp,sp,4
  800630:	08005001 	jmpi	800500 <udivmodsi4>
  800634:	0147c83a 	sub	r3,zero,r5
  800638:	003ff306 	br	800608 <__modsi3+0x2c>

0080063c <__udivsi3>:
  80063c:	000d883a 	mov	r6,zero
  800640:	08005001 	jmpi	800500 <udivmodsi4>

00800644 <__umodsi3>:
  800644:	01800044 	movi	r6,1
  800648:	08005001 	jmpi	800500 <udivmodsi4>

0080064c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80064c:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  800650:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  800654:	00fffa84 	movi	r3,-22
  800658:	11002236 	bltu	r2,r4,8006e4 <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80065c:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800660:	027fff84 	movi	r9,-2
  800664:	5244703a 	and	r2,r10,r9
  800668:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  80066c:	200490fa 	slli	r2,r4,3
  800670:	00c02034 	movhi	r3,128
  800674:	18c34204 	addi	r3,r3,3336
  800678:	02002034 	movhi	r8,128
  80067c:	42033d04 	addi	r8,r8,3316
  800680:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
  800684:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  800688:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80068c:	30000826 	beq	r6,zero,8006b0 <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800690:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800694:	2244703a 	and	r2,r4,r9
  800698:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  80069c:	00c00044 	movi	r3,1
  8006a0:	19c6983a 	sll	r3,r3,r7
  8006a4:	40800017 	ldw	r2,0(r8)
  8006a8:	10c4b03a 	or	r2,r2,r3
  8006ac:	00000706 	br	8006cc <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8006b0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8006b4:	2244703a 	and	r2,r4,r9
  8006b8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  8006bc:	00ffff84 	movi	r3,-2
  8006c0:	19c6183a 	rol	r3,r3,r7
  8006c4:	40800017 	ldw	r2,0(r8)
  8006c8:	10c4703a 	and	r2,r2,r3
  8006cc:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8006d0:	40800017 	ldw	r2,0(r8)
  8006d4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8006d8:	2001703a 	wrctl	status,r4
  8006dc:	5001703a 	wrctl	status,r10
  8006e0:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
  8006e4:	1805883a 	mov	r2,r3
  8006e8:	f800283a 	ret

008006ec <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8006ec:	2900051e 	bne	r5,r4,800704 <alt_load_section+0x18>
  8006f0:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
  8006f4:	20800017 	ldw	r2,0(r4)
  8006f8:	21000104 	addi	r4,r4,4
  8006fc:	28800015 	stw	r2,0(r5)
  800700:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800704:	29bffb1e 	bne	r5,r6,8006f4 <alt_load_section+0x8>
  800708:	f800283a 	ret

0080070c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80070c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800710:	01002034 	movhi	r4,128
  800714:	2102cd04 	addi	r4,r4,2868
  800718:	01402034 	movhi	r5,128
  80071c:	29426c04 	addi	r5,r5,2480
  800720:	01802034 	movhi	r6,128
  800724:	3182cd04 	addi	r6,r6,2868
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800728:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80072c:	08006ec0 	call	8006ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800730:	01002034 	movhi	r4,128
  800734:	21000804 	addi	r4,r4,32
  800738:	01402034 	movhi	r5,128
  80073c:	29400804 	addi	r5,r5,32
  800740:	01802034 	movhi	r6,128
  800744:	31805204 	addi	r6,r6,328
  800748:	08006ec0 	call	8006ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80074c:	01002034 	movhi	r4,128
  800750:	21025b04 	addi	r4,r4,2412
  800754:	01402034 	movhi	r5,128
  800758:	29425b04 	addi	r5,r5,2412
  80075c:	01802034 	movhi	r6,128
  800760:	31826c04 	addi	r6,r6,2480
  800764:	08006ec0 	call	8006ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800768:	08008ac0 	call	8008ac <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  80076c:	dfc00017 	ldw	ra,0(sp)
  800770:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  800774:	08009281 	jmpi	800928 <alt_icache_flush_all>

00800778 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800778:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80077c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800780:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800784:	08008000 	call	800800 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800788:	08007b40 	call	8007b4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  80078c:	d1208117 	ldw	r4,-32252(gp)
  800790:	d1608217 	ldw	r5,-32248(gp)
  800794:	d1a08317 	ldw	r6,-32244(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  800798:	dfc00017 	ldw	ra,0(sp)
  80079c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  8007a0:	08004301 	jmpi	800430 <main>

008007a4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
  8007a4:	08008201 	jmpi	800820 <alt_busy_sleep>

008007a8 <alt_dev_reg>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8007a8:	01402034 	movhi	r5,128
  8007ac:	2942c904 	addi	r5,r5,2852
  8007b0:	08008b81 	jmpi	8008b8 <alt_dev_llist_insert>

008007b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8007b4:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_MS, timer_ms);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX, HEX);
  8007b8:	01002034 	movhi	r4,128
  8007bc:	21027004 	addi	r4,r4,2496
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8007c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_MS, timer_ms);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX, HEX);
  8007c4:	08007a80 	call	8007a8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( KEY, KEY);
  8007c8:	01002034 	movhi	r4,128
  8007cc:	21027b04 	addi	r4,r4,2540
  8007d0:	08007a80 	call	8007a8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LEDG, LEDG);
  8007d4:	01002034 	movhi	r4,128
  8007d8:	21028604 	addi	r4,r4,2584
  8007dc:	08007a80 	call	8007a8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LEDR, LEDR);
  8007e0:	01002034 	movhi	r4,128
  8007e4:	21029104 	addi	r4,r4,2628
  8007e8:	08007a80 	call	8007a8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SW, SW);
  8007ec:	01002034 	movhi	r4,128
  8007f0:	21029c04 	addi	r4,r4,2672
}
  8007f4:	dfc00017 	ldw	ra,0(sp)
  8007f8:	dec00104 	addi	sp,sp,4
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX, HEX);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( KEY, KEY);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LEDG, LEDG);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LEDR, LEDR);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SW, SW);
  8007fc:	08007a81 	jmpi	8007a8 <alt_dev_reg>

00800800 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800800:	deffff04 	addi	sp,sp,-4
  800804:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
  800808:	080092c0 	call	80092c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80080c:	00800044 	movi	r2,1
  800810:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800814:	dfc00017 	ldw	ra,0(sp)
  800818:	dec00104 	addi	sp,sp,4
  80081c:	f800283a 	ret

00800820 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  800820:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  800824:	014666b4 	movhi	r5,6554
  800828:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80082c:	dc000015 	stw	r16,0(sp)
  800830:	dfc00115 	stw	ra,4(sp)
  800834:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  800838:	080063c0 	call	80063c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80083c:	10001126 	beq	r2,zero,800884 <alt_busy_sleep+0x64>
  800840:	0007883a 	mov	r3,zero
  800844:	01200034 	movhi	r4,32768
  800848:	213fffc4 	addi	r4,r4,-1
  80084c:	017999b4 	movhi	r5,58982
  800850:	295999c4 	addi	r5,r5,26215
  800854:	00000406 	br	800868 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  800858:	213fffc4 	addi	r4,r4,-1
  80085c:	203ffe1e 	bne	r4,zero,800858 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  800860:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  800864:	18c00044 	addi	r3,r3,1
  800868:	18bffb16 	blt	r3,r2,800858 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80086c:	8009883a 	mov	r4,r16
  800870:	01400144 	movi	r5,5
  800874:	08009340 	call	800934 <__mulsi3>
  800878:	10bfffc4 	addi	r2,r2,-1
  80087c:	103ffe1e 	bne	r2,zero,800878 <alt_busy_sleep+0x58>
  800880:	00000506 	br	800898 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  800884:	8009883a 	mov	r4,r16
  800888:	01400144 	movi	r5,5
  80088c:	08009340 	call	800934 <__mulsi3>
  800890:	10bfffc4 	addi	r2,r2,-1
  800894:	00bffe16 	blt	zero,r2,800890 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
  800898:	0005883a 	mov	r2,zero
  80089c:	dfc00117 	ldw	ra,4(sp)
  8008a0:	dc000017 	ldw	r16,0(sp)
  8008a4:	dec00204 	addi	sp,sp,8
  8008a8:	f800283a 	ret

008008ac <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8008ac:	f800283a 	ret

008008b0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  8008b0:	3005883a 	mov	r2,r6
  8008b4:	f800283a 	ret

008008b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8008b8:	deffff04 	addi	sp,sp,-4
  8008bc:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8008c0:	20000326 	beq	r4,zero,8008d0 <alt_dev_llist_insert+0x18>
  8008c4:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
  8008c8:	000d883a 	mov	r6,zero
  8008cc:	10000c1e 	bne	r2,zero,800900 <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8008d0:	00802034 	movhi	r2,128
  8008d4:	1082cc04 	addi	r2,r2,2864
  8008d8:	10800017 	ldw	r2,0(r2)
  8008dc:	00c02034 	movhi	r3,128
  8008e0:	18c34104 	addi	r3,r3,3332
  8008e4:	10000226 	beq	r2,zero,8008f0 <alt_dev_llist_insert+0x38>
  8008e8:	103ee83a 	callr	r2
  8008ec:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
  8008f0:	00800584 	movi	r2,22
  8008f4:	01bffa84 	movi	r6,-22
  8008f8:	18800015 	stw	r2,0(r3)
  8008fc:	00000606 	br	800918 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  800900:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  800904:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  800908:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  80090c:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
  800910:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  800914:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  800918:	3005883a 	mov	r2,r6
  80091c:	dfc00017 	ldw	ra,0(sp)
  800920:	dec00104 	addi	sp,sp,4
  800924:	f800283a 	ret

00800928 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  800928:	f800283a 	ret

0080092c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  80092c:	000170fa 	wrctl	ienable,zero
}
  800930:	f800283a 	ret

00800934 <__mulsi3>:
  800934:	20000a26 	beq	r4,zero,800960 <__mulsi3+0x2c>
  800938:	0007883a 	mov	r3,zero
  80093c:	2080004c 	andi	r2,r4,1
  800940:	1005003a 	cmpeq	r2,r2,zero
  800944:	2008d07a 	srli	r4,r4,1
  800948:	1000011e 	bne	r2,zero,800950 <__mulsi3+0x1c>
  80094c:	1947883a 	add	r3,r3,r5
  800950:	294b883a 	add	r5,r5,r5
  800954:	203ff91e 	bne	r4,zero,80093c <__mulsi3+0x8>
  800958:	1805883a 	mov	r2,r3
  80095c:	f800283a 	ret
  800960:	0007883a 	mov	r3,zero
  800964:	1805883a 	mov	r2,r3
  800968:	f800283a 	ret
